[{"/Users/seongjehun/Desktop/study/reactPrac/omok/src/index.js":"1","/Users/seongjehun/Desktop/study/reactPrac/omok/src/App.js":"2","/Users/seongjehun/Desktop/study/reactPrac/omok/src/components/Plate.js":"3","/Users/seongjehun/Desktop/study/reactPrac/omok/src/rules/winRule.js":"4","/Users/seongjehun/Desktop/study/reactPrac/omok/src/rules/prohibitRule.js":"5","/Users/seongjehun/Desktop/study/reactPrac/omok/src/rules/arrayCopy.js":"6"},{"size":409,"mtime":1624338017290,"results":"7","hashOfConfig":"8"},{"size":2084,"mtime":1625206363600,"results":"9","hashOfConfig":"8"},{"size":1764,"mtime":1625034606288,"results":"10","hashOfConfig":"8"},{"size":10169,"mtime":1625205726048,"results":"11","hashOfConfig":"8"},{"size":0,"mtime":1624955935087,"results":"12","hashOfConfig":"8"},{"size":360,"mtime":1625188567553,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"13l1nov",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/seongjehun/Desktop/study/reactPrac/omok/src/index.js",[],["28","29"],"/Users/seongjehun/Desktop/study/reactPrac/omok/src/App.js",["30","31"],"/Users/seongjehun/Desktop/study/reactPrac/omok/src/components/Plate.js",[],"/Users/seongjehun/Desktop/study/reactPrac/omok/src/rules/winRule.js",["32"],"exports.winRule = (turn, stoneArr, max) => { \n    //i,j 는 2차원 배열의 index, turn은 흑인지 백인지, \n    //sonteArr 는 판의 상태(2차원 배열), max 는 판의 최대 크기 \n    const winCheckArr = stoneArr;\n    // console.log(winCheckArr);\n    if(turn === 0){//흑돌 차례일 때 승리조건 판단\n        for (let i = 0; i < max; i++) {\n            for (let j = 0; j < max; j++) {\n                if(winCheckArr[i][j] === 0) {\n                    continue;\n                }\n                if(// RIGHT\n                    winCheckArr[i][j]===1 && \n                    winCheckArr[i][j+1]===1 && \n                    winCheckArr[i][j+2]===1 && \n                    winCheckArr[i][j+3]===1 && \n                    winCheckArr[i][j+4]===1){\n                        console.log(winCheckArr);\n                        if(winCheckArr[i][j+5]===1){ // 6목 판단\n                            return \"prohibitRule\"\n                        }\n                        if(winCheckArr[i][j+5]===1 && winCheckArr[i][j+6]===1){\n                            return \"prohibitRule\"\n                        }\n                        if(winCheckArr[i][j+5]===1 && winCheckArr[i][j+6]===1 && winCheckArr[i][j+7]===1){\n                            return \"prohibitRule\"\n                        }\n                        if(winCheckArr[i][j+5]===1 && winCheckArr[i][j+6]===1 && winCheckArr[i][j+7]===1 && winCheckArr[i][j+8]===1){\n                            return \"prohibitRule\"\n                        }\n                        alert(\"흑 승리!\")\n                        return \"blackWin\"\n                }else if( // RIGHT DOWN\n                    winCheckArr[i][j]===1 && \n                    winCheckArr[i+1][j+1]===1 && \n                    winCheckArr[i+2][j+2]===1 && \n                    winCheckArr[i+3][j+3]===1 && \n                    winCheckArr[i+4][j+4]===1){\n                        if(winCheckArr[i+5][j+5]===1){ // 6목 판단\n                            return \"prohibitRule\"\n                        }\n                        if(winCheckArr[i+5][j+5]===1 && winCheckArr[i+6][j+6]===1){\n                            return \"prohibitRule\"\n                        }\n                        if(winCheckArr[i+5][j+5]===1 && winCheckArr[i+6][j+6]===1 && winCheckArr[i+7][j+7]===1){\n                            return \"prohibitRule\"\n                        }\n                        if(winCheckArr[i+5][j+5]===1 && winCheckArr[i+6][j+6]===1 && winCheckArr[i+7][j+7]===1 && winCheckArr[i+8][j+8]===1){\n                            return \"prohibitRule\"\n                        }\n                        alert(\"흑 승리!\")            \n                        return \"blackWin\"\n                }else if( // DOWN\n                    winCheckArr[i][j]===1 && \n                    winCheckArr[i+1][j]===1 && \n                    winCheckArr[i+2][j]===1 && \n                    winCheckArr[i+3][j]===1 && \n                    winCheckArr[i+4][j]===1){\n                        if(winCheckArr[i+5][j]===1){ // 6목 판단\n                            return \"prohibitRule\"\n                        }\n                        if(winCheckArr[i+5][j]===1 && winCheckArr[i+6][j]===1){\n                            return \"prohibitRule\"\n                        }\n                        if(winCheckArr[i+5][j]===1 && winCheckArr[i+6][j]===1 && winCheckArr[i+7][j]===1){\n                            return \"prohibitRule\"\n                        }\n                        if(winCheckArr[i+5][j]===1 && winCheckArr[i+6][j]===1 && winCheckArr[i+7][j]===1 && winCheckArr[i+8][j]===1){\n                            return \"prohibitRule\"\n                        }\n                        alert(\"흑 승리!\")\n                        return \"blackWin\"\n                }else if( // LEFT DOWN\n                    winCheckArr[i][j]===1 && \n                    winCheckArr[i+1][j-1]===1 && \n                    winCheckArr[i+2][j-2]===1 && \n                    winCheckArr[i+3][j-3]===1 && \n                    winCheckArr[i+4][j-4]===1){\n                        if(winCheckArr[i+5][j-5]===1){ // 6목 판단\n                            return \"prohibitRule\"\n                        }\n                        if(winCheckArr[i+5][j-5]===1 && winCheckArr[i+6][j-6]===1){\n                            return \"prohibitRule\"\n                        }\n                        if(winCheckArr[i+5][j-5]===1 && winCheckArr[i+6][j-6]===1 && winCheckArr[i+7][j-7]===1){\n                            return \"prohibitRule\"\n                        }\n                        if(winCheckArr[i+5][j-5]===1 && winCheckArr[i+6][j-6]===1 && winCheckArr[i+7][j-7]===1 && winCheckArr[i+8][j-8]===1){\n                            return \"prohibitRule\"\n                        }\n                        alert(\"흑 승리!\")\n                        return \"blackWin\"\n                }else{ // winrule 에 걸리지 않을 경우\n                    return \"continue\"\n                }          \n            }\n        }\n    }else if(turn === 1){//백돌 차례일 때 승리조건 판단\n        for (let i = 0; i < max; i++) {\n            for (let j = 0; j < max; j++) {\n                if(winCheckArr[i][j] === 0) {\n                    continue;\n                }\n                if(// RIGHT\n                    winCheckArr[i][j]===-1 && \n                    winCheckArr[i][j+1]===-1 && \n                    winCheckArr[i][j+2]===-1 && \n                    winCheckArr[i][j+3]===-1 && \n                    winCheckArr[i][j+4]===-1){\n                        console.log(winCheckArr);\n                        if(winCheckArr[i][j+5]===-1){ // 6목 판단\n                            return \"long\"\n                        }\n                        if(winCheckArr[i][j+5]===-1 && winCheckArr[i][j+6]===-1){\n                            return \"long\"\n                        }\n                        if(winCheckArr[i][j+5]===-1 && winCheckArr[i][j+6]===-1 && winCheckArr[i][j+7]===-1){\n                            return \"long\"\n                        }\n                        if(winCheckArr[i][j+5]===-1 && winCheckArr[i][j+6]===-1 && winCheckArr[i][j+7]===-1 && winCheckArr[i][j+8]===-1){\n                            return \"long\"\n                        }\n                        alert(\"백 승리!\")\n                        return \"whiteWin\"\n                }else if( // RIGHT DOWN\n                    winCheckArr[i][j]===-1 && \n                    winCheckArr[i+1][j+1]===-1 && \n                    winCheckArr[i+2][j+2]===-1 && \n                    winCheckArr[i+3][j+3]===-1 && \n                    winCheckArr[i+4][j+4]===-1){\n                        if(winCheckArr[i+5][j+5]===-1){ // 6목 판단\n                            return \"long\"\n                        }\n                        if(winCheckArr[i+5][j+5]===-1 && winCheckArr[i+6][j+6]===-1){\n                            return \"long\"\n                        }\n                        if(winCheckArr[i+5][j+5]===-1 && winCheckArr[i+6][j+6]===-1 && winCheckArr[i+7][j+7]===-1){\n                            return \"long\"\n                        }\n                        if(winCheckArr[i+5][j+5]===-1 && winCheckArr[i+6][j+6]===-1 && winCheckArr[i+7][j+7]===-1 && winCheckArr[i+8][j+8]===-1){\n                            return \"long\"\n                        }\n                        alert(\"백 승리!\")            \n                        return \"whiteWin\"\n                }else if( // DOWN\n                    winCheckArr[i][j]===-1 && \n                    winCheckArr[i+1][j]===-1 && \n                    winCheckArr[i+2][j]===-1 && \n                    winCheckArr[i+3][j]===-1 && \n                    winCheckArr[i+4][j]===-1){\n                        if(winCheckArr[i+5][j]===-1){ // 6목 판단\n                            return \"long\"\n                        }\n                        if(winCheckArr[i+5][j]===-1 && winCheckArr[i+6][j]===-1){\n                            return \"long\"\n                        }\n                        if(winCheckArr[i+5][j]===-1 && winCheckArr[i+6][j]===-1 && winCheckArr[i+7][j]===-1){\n                            return \"long\"\n                        }\n                        if(winCheckArr[i+5][j]===-1 && winCheckArr[i+6][j]===-1 && winCheckArr[i+7][j]===-1 && winCheckArr[i+8][j]===-1){\n                            return \"long\"\n                        }\n                        alert(\"백 승리!\")\n                        return \"whiteWin\"\n                }else if( // LEFT DOWN\n                    winCheckArr[i][j]===-1 && \n                    winCheckArr[i+1][j-1]===-1 && \n                    winCheckArr[i+2][j-2]===-1 && \n                    winCheckArr[i+3][j-3]===-1 && \n                    winCheckArr[i+4][j-4]===-1){\n                        if(winCheckArr[i+5][j-5]===-1){ // 6목 판단\n                            return \"long\"\n                        }\n                        if(winCheckArr[i+5][j-5]===-1 && winCheckArr[i+6][j-6]===-1){\n                            return \"long\"\n                        }\n                        if(winCheckArr[i+5][j-5]===-1 && winCheckArr[i+6][j-6]===-1 && winCheckArr[i+7][j-7]===-1){\n                            return \"long\"\n                        }\n                        if(winCheckArr[i+5][j-5]===-1 && winCheckArr[i+6][j-6]===-1 && winCheckArr[i+7][j-7]===-1 && winCheckArr[i+8][j-8]===-1){\n                            return \"long\"\n                        }\n                        alert(\"백 승리!\")\n                        return \"whiteWin\"\n                }else{ // winrule 에 걸리지 않을 경우\n                    return \"continue\"\n                }          \n            }\n        }\n    }\n}\n\nfunction checkAround(i, j, turn, checkArr){ // 돌을 놓는 곳을 기준으로 8방향에서 돌이 존재하는 확인하는 부분\n    // turn 은 흑,백돌을 판단하는 부분, checkArr 는 확인할 배열\n    // checkArr[i-1][j-1]===turn \n    // checkArr[i][j-1]===turn \n    // checkArr[i+1][j-1]===turn \n    // checkArr[i-1][j]===turn \n    // checkArr[i+1][j]===turn \n    // checkArr[i-1][j+1]===turn \n    // checkArr[i][j+1]===turn \n    // checkArr[i+1][j+1]===turn \n}\n\nexports.test = ()=>{\n    console.log(\"test\");\n}","/Users/seongjehun/Desktop/study/reactPrac/omok/src/rules/prohibitRule.js",[],"/Users/seongjehun/Desktop/study/reactPrac/omok/src/rules/arrayCopy.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":4,"column":7,"nodeType":"39","messageId":"40","endLine":4,"endColumn":20},{"ruleId":"37","severity":1,"message":"41","line":9,"column":7,"nodeType":"39","messageId":"40","endLine":9,"endColumn":17},{"ruleId":"37","severity":1,"message":"42","line":193,"column":10,"nodeType":"39","messageId":"40","endLine":193,"endColumn":21},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'prophibitRule' is assigned a value but never used.","Identifier","unusedVar","'emptyPlate' is assigned a value but never used.","'checkAround' is defined but never used.","no-global-assign","no-unsafe-negation"]