[{"/Users/seongjehun/Desktop/study/reactPrac/omok/src/index.js":"1","/Users/seongjehun/Desktop/study/reactPrac/omok/src/App.js":"2","/Users/seongjehun/Desktop/study/reactPrac/omok/src/components/Plate.js":"3","/Users/seongjehun/Desktop/study/reactPrac/omok/src/rules/winRule.js":"4","/Users/seongjehun/Desktop/study/reactPrac/omok/src/rules/prohibitRule.js":"5"},{"size":409,"mtime":1624338017290,"results":"6","hashOfConfig":"7"},{"size":1262,"mtime":1625034249770,"results":"8","hashOfConfig":"7"},{"size":1764,"mtime":1625034606288,"results":"9","hashOfConfig":"7"},{"size":892,"mtime":1624955951171,"results":"10","hashOfConfig":"7"},{"size":0,"mtime":1624955935087,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"13l1nov",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/seongjehun/Desktop/study/reactPrac/omok/src/index.js",[],["25","26"],"/Users/seongjehun/Desktop/study/reactPrac/omok/src/App.js",["27","28"],"import React from \"react\"\nimport Plate from \"./components/Plate\"\nconst winRule = require('./rules/winRule')\nconst prophibitRule = require('./rules/prohibitRule')\n\nconst max = 15;\nconst plateStateArr = Array.from(Array(max), () => Array(max).fill(0))\n\n\nclass App extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      plateState: plateStateArr,// 0 은 안놓아진 상태 , 1은 흑돌 -1 은 백돌\n      turn: 0 // 0 일 때 흑돌차례, 1일 때 백돌차례\n    }\n    this.turnChange=this.turnChange.bind(this)\n  }\n\n  turnChange(i, j){// i, j 는 받아오는 좌표값\n    let tmpArr = plateStateArr;\n    // console.log(this.state.plateState);\n    if(this.state.plateState[i][j]===0){\n      if(this.state.turn===0){\n        tmpArr[i][j]=1\n        this.setState({\n          plateState:tmpArr,\n          turn:1\n        })\n        // console.log(this.state.plateState[i][j]);\n      }else{\n        tmpArr[i][j]=-1\n        this.setState({\n          plateState:tmpArr,\n          turn:0\n        }) \n      }\n    }else{\n      return;\n    }\n  }\n\n  render(){\n    return (\n      <div>\n        <Plate change={this.turnChange} plateArr={this.state.plateState} turn={this.state.turn}/>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","/Users/seongjehun/Desktop/study/reactPrac/omok/src/components/Plate.js",[],"/Users/seongjehun/Desktop/study/reactPrac/omok/src/rules/winRule.js",["29","30"],"exports.winRule = (i, j, turn, stoneArr, max) => { \n    //i,j 는 2차원 배열의 index, turn은 흑인지 백인지, \n    //sonteArr 는 판의 상태(2차원 배열), max 는 판의 최대 크기 \n    const ruleCheckArr = stoneArr;\n    if(turn === 1){//백돌 차례일 때 승리조건 판단\n\n    }else{//흑돌 차례일 때 승리조건 판단\n\n    }\n}\n\nfunction checkAround(i, j, turn, checkArr){ // 돌을 놓는 곳을 기준으로 8방향에서 돌이 존재하는 확인하는 부분\n    // turn 은 흑,백돌을 판단하는 부분, checkArr 는 확인할 배열\n    // checkArr[i-1][j-1]===turn \n    // checkArr[i][j-1]===turn \n    // checkArr[i+1][j-1]===turn \n    // checkArr[i-1][j]===turn \n    // checkArr[i+1][j]===turn \n    // checkArr[i-1][j+1]===turn \n    // checkArr[i][j+1]===turn \n    // checkArr[i+1][j+1]===turn \n}\n\nexports.test = ()=>{\n    console.log(\"test\");\n}","/Users/seongjehun/Desktop/study/reactPrac/omok/src/rules/prohibitRule.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":3,"column":7,"nodeType":"37","messageId":"38","endLine":3,"endColumn":14},{"ruleId":"35","severity":1,"message":"39","line":4,"column":7,"nodeType":"37","messageId":"38","endLine":4,"endColumn":20},{"ruleId":"35","severity":1,"message":"40","line":4,"column":11,"nodeType":"37","messageId":"38","endLine":4,"endColumn":23},{"ruleId":"35","severity":1,"message":"41","line":12,"column":10,"nodeType":"37","messageId":"38","endLine":12,"endColumn":21},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'winRule' is assigned a value but never used.","Identifier","unusedVar","'prophibitRule' is assigned a value but never used.","'ruleCheckArr' is assigned a value but never used.","'checkAround' is defined but never used.","no-global-assign","no-unsafe-negation"]