{"ast":null,"code":"exports.winRule = (i, j, turn, stoneArr, max) => {\n  //i,j 는 2차원 배열의 index, turn은 흑인지 백인지, \n  //sonteArr 는 판의 상태(2차원 배열), max 는 판의 최대 크기 \n  const ruleCheckArr = stoneArr;\n\n  if (turn === 1) {//백돌 차례일 때 승리조건 판단\n  } else {//흑돌 차례일 때 승리조건 판단\n    }\n};\n\nfunction checkAround(turn, checkArr) {\n  // 돌을 놓는 곳을 기준으로 8방향에서 돌이 존재하는 확인하는 부분\n  // turn 은 흑,백돌을 판단하는 부분, checkArr 는 확인할 배열\n  checkArr[i - 1][j - 1] === turn;\n  checkArr[i][j - 1] === turn;\n  checkArr[i + 1][j - 1] === turn;\n  checkArr[i - 1][j] === turn;\n  checkArr[i + 1][j] === turn;\n  checkArr[i - 1][j + 1] === turn;\n  checkArr[i][j + 1] === turn;\n  checkArr[i + 1][j + 1] === turn;\n}\n\nexports.test = () => {\n  console.log(\"test\");\n};","map":{"version":3,"sources":["/Users/seongjehun/Desktop/study/reactPrac/omok/src/rules/winRule.js"],"names":["exports","winRule","i","j","turn","stoneArr","max","ruleCheckArr","checkAround","checkArr","test","console","log"],"mappings":"AAAAA,OAAO,CAACC,OAAR,GAAkB,CAACC,CAAD,EAAIC,CAAJ,EAAOC,IAAP,EAAaC,QAAb,EAAuBC,GAAvB,KAA+B;AAC7C;AACA;AACA,QAAMC,YAAY,GAAGF,QAArB;;AACA,MAAGD,IAAI,KAAK,CAAZ,EAAc,CAAC;AAEd,GAFD,MAEK,CAAC;AAEL;AACJ,CATD;;AAWA,SAASI,WAAT,CAAqBJ,IAArB,EAA2BK,QAA3B,EAAoC;AAAE;AAClC;AACAA,EAAAA,QAAQ,CAACP,CAAC,GAAC,CAAH,CAAR,CAAcC,CAAC,GAAC,CAAhB,MAAqBC,IAArB;AACAK,EAAAA,QAAQ,CAACP,CAAD,CAAR,CAAYC,CAAC,GAAC,CAAd,MAAmBC,IAAnB;AACAK,EAAAA,QAAQ,CAACP,CAAC,GAAC,CAAH,CAAR,CAAcC,CAAC,GAAC,CAAhB,MAAqBC,IAArB;AACAK,EAAAA,QAAQ,CAACP,CAAC,GAAC,CAAH,CAAR,CAAcC,CAAd,MAAmBC,IAAnB;AACAK,EAAAA,QAAQ,CAACP,CAAC,GAAC,CAAH,CAAR,CAAcC,CAAd,MAAmBC,IAAnB;AACAK,EAAAA,QAAQ,CAACP,CAAC,GAAC,CAAH,CAAR,CAAcC,CAAC,GAAC,CAAhB,MAAqBC,IAArB;AACAK,EAAAA,QAAQ,CAACP,CAAD,CAAR,CAAYC,CAAC,GAAC,CAAd,MAAmBC,IAAnB;AACAK,EAAAA,QAAQ,CAACP,CAAC,GAAC,CAAH,CAAR,CAAcC,CAAC,GAAC,CAAhB,MAAqBC,IAArB;AACH;;AAEDJ,OAAO,CAACU,IAAR,GAAe,MAAI;AACfC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,CAFD","sourcesContent":["exports.winRule = (i, j, turn, stoneArr, max) => { \n    //i,j 는 2차원 배열의 index, turn은 흑인지 백인지, \n    //sonteArr 는 판의 상태(2차원 배열), max 는 판의 최대 크기 \n    const ruleCheckArr = stoneArr;\n    if(turn === 1){//백돌 차례일 때 승리조건 판단\n\n    }else{//흑돌 차례일 때 승리조건 판단\n\n    }\n}\n\nfunction checkAround(turn, checkArr){ // 돌을 놓는 곳을 기준으로 8방향에서 돌이 존재하는 확인하는 부분\n    // turn 은 흑,백돌을 판단하는 부분, checkArr 는 확인할 배열\n    checkArr[i-1][j-1]===turn \n    checkArr[i][j-1]===turn \n    checkArr[i+1][j-1]===turn \n    checkArr[i-1][j]===turn \n    checkArr[i+1][j]===turn \n    checkArr[i-1][j+1]===turn \n    checkArr[i][j+1]===turn \n    checkArr[i+1][j+1]===turn \n}\n\nexports.test = ()=>{\n    console.log(\"test\");\n}"]},"metadata":{},"sourceType":"module"}