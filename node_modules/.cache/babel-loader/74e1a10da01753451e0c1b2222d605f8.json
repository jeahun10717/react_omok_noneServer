{"ast":null,"code":"exports.winRule = (i, j, turn, stoneArr, max) => {\n  //i,j 는 2차원 배열의 index, turn은 흑인지 백인지, \n  //sonteArr 는 판의 상태(2차원 배열), max 는 판의 최대 크기 \n  const winCheckArr = stoneArr;\n\n  if (turn === 0) {\n    //흑돌 차례일 때 승리조건 판단\n    if ( // LEFT\n    winCheckArr[i][j] === 1 && winCheckArr[i][j + 1] === 1 && winCheckArr[i][j + 2] === 1 && winCheckArr[i][j + 3] === 1 && winCheckArr[i][j + 4] === 1) {\n      alert(\"흑 승리!\");\n    } else if ( // LEFT DOWN\n    winCheckArr[i][j] === 1 && winCheckArr[i + 1][j + 1] === 1 && winCheckArr[i + 2][j + 2] === 1 && winCheckArr[i + 3][j + 3] === 1 && winCheckArr[i + 4][j + 4] === 1) {\n      alert(\"흑 승리!\");\n    } else if ( // DOWN\n    winCheckArr[i][j] === 1 && winCheckArr[i + 1][j] === 1 && winCheckArr[i + 2][j] === 1 && winCheckArr[i + 3][j] === 1 && winCheckArr[i + 4][j] === 1) {\n      alert(\"흑 승리!\");\n    } else if ( // RIGHT DOWN\n    winCheckArr[i][j] === 1 && winCheckArr[i + 1][j - 1] === 1 && winCheckArr[i + 2][j - 2] === 1 && winCheckArr[i + 3][j - 3] === 1 && winCheckArr[i + 4][j - 4] === 1) {\n      alert(\"흑 승리!\");\n    }\n  } else if (turn === 1) {\n    //백돌 차례일 때 승리조건 판단\n    if ( // LEFT\n    winCheckArr[i][j] === -1 && winCheckArr[i][j + 1] === -1 && winCheckArr[i][j + 2] === -1 && winCheckArr[i][j + 3] === -1 && winCheckArr[i][j + 4] === -1) {\n      alert(\"흑 승리!\");\n    } else if ( // LEFT DOWN\n    winCheckArr[i][j] === -1 && winCheckArr[i + 1][j + 1] === -1 && winCheckArr[i + 2][j + 2] === -1 && winCheckArr[i + 3][j + 3] === -1 && winCheckArr[i + 4][j + 4] === -1) {\n      alert(\"흑 승리!\");\n    } else if ( // DOWN\n    winCheckArr[i][j] === -1 && winCheckArr[i + 1][j] === -1 && winCheckArr[i + 2][j] === -1 && winCheckArr[i + 3][j] === -1 && winCheckArr[i + 4][j] === -1) {\n      alert(\"흑 승리!\");\n    } else if ( // RIGHT DOWN\n    winCheckArr[i][j] === -1 && winCheckArr[i + 1][j - 1] === -1 && winCheckArr[i + 2][j - 2] === -1 && winCheckArr[i + 3][j - 3] === -1 && winCheckArr[i + 4][j - 4] === -1) {\n      alert(\"흑 승리!\");\n    }\n  }\n};\n\nfunction checkAround(i, j, turn, checkArr) {// 돌을 놓는 곳을 기준으로 8방향에서 돌이 존재하는 확인하는 부분\n  // turn 은 흑,백돌을 판단하는 부분, checkArr 는 확인할 배열\n  // checkArr[i-1][j-1]===turn \n  // checkArr[i][j-1]===turn \n  // checkArr[i+1][j-1]===turn \n  // checkArr[i-1][j]===turn \n  // checkArr[i+1][j]===turn \n  // checkArr[i-1][j+1]===turn \n  // checkArr[i][j+1]===turn \n  // checkArr[i+1][j+1]===turn \n}\n\nexports.test = () => {\n  console.log(\"test\");\n};","map":{"version":3,"sources":["/Users/seongjehun/Desktop/study/reactPrac/omok/src/rules/winRule.js"],"names":["exports","winRule","i","j","turn","stoneArr","max","winCheckArr","alert","checkAround","checkArr","test","console","log"],"mappings":"AAAAA,OAAO,CAACC,OAAR,GAAkB,CAACC,CAAD,EAAIC,CAAJ,EAAOC,IAAP,EAAaC,QAAb,EAAuBC,GAAvB,KAA+B;AAC7C;AACA;AACA,QAAMC,WAAW,GAAGF,QAApB;;AACA,MAAGD,IAAI,KAAK,CAAZ,EAAc;AAAC;AACX,SAAG;AACCG,IAAAA,WAAW,CAACL,CAAD,CAAX,CAAeC,CAAf,MAAoB,CAApB,IACAI,WAAW,CAACL,CAAD,CAAX,CAAeC,CAAC,GAAC,CAAjB,MAAsB,CADtB,IAEAI,WAAW,CAACL,CAAD,CAAX,CAAeC,CAAC,GAAC,CAAjB,MAAsB,CAFtB,IAGAI,WAAW,CAACL,CAAD,CAAX,CAAeC,CAAC,GAAC,CAAjB,MAAsB,CAHtB,IAIAI,WAAW,CAACL,CAAD,CAAX,CAAeC,CAAC,GAAC,CAAjB,MAAsB,CAL1B,EAK4B;AACxBK,MAAAA,KAAK,CAAC,OAAD,CAAL;AACH,KAPD,MAOM,KAAI;AACND,IAAAA,WAAW,CAACL,CAAD,CAAX,CAAeC,CAAf,MAAoB,CAApB,IACAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAC,GAAC,CAAnB,MAAwB,CADxB,IAEAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAC,GAAC,CAAnB,MAAwB,CAFxB,IAGAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAC,GAAC,CAAnB,MAAwB,CAHxB,IAIAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAC,GAAC,CAAnB,MAAwB,CALtB,EAKwB;AAC1BK,MAAAA,KAAK,CAAC,OAAD,CAAL;AACH,KAPK,MAOA,KAAI;AACND,IAAAA,WAAW,CAACL,CAAD,CAAX,CAAeC,CAAf,MAAoB,CAApB,IACAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAjB,MAAsB,CADtB,IAEAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAjB,MAAsB,CAFtB,IAGAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAjB,MAAsB,CAHtB,IAIAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAjB,MAAsB,CALpB,EAKsB;AACxBK,MAAAA,KAAK,CAAC,OAAD,CAAL;AACH,KAPK,MAOA,KAAI;AACND,IAAAA,WAAW,CAACL,CAAD,CAAX,CAAeC,CAAf,MAAoB,CAApB,IACAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAC,GAAC,CAAnB,MAAwB,CADxB,IAEAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAC,GAAC,CAAnB,MAAwB,CAFxB,IAGAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAC,GAAC,CAAnB,MAAwB,CAHxB,IAIAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAC,GAAC,CAAnB,MAAwB,CALtB,EAKwB;AAC1BK,MAAAA,KAAK,CAAC,OAAD,CAAL;AACH;AACJ,GA9BD,MA8BM,IAAGJ,IAAI,KAAK,CAAZ,EAAc;AAAC;AACjB,SAAG;AACCG,IAAAA,WAAW,CAACL,CAAD,CAAX,CAAeC,CAAf,MAAoB,CAAC,CAArB,IACAI,WAAW,CAACL,CAAD,CAAX,CAAeC,CAAC,GAAC,CAAjB,MAAsB,CAAC,CADvB,IAEAI,WAAW,CAACL,CAAD,CAAX,CAAeC,CAAC,GAAC,CAAjB,MAAsB,CAAC,CAFvB,IAGAI,WAAW,CAACL,CAAD,CAAX,CAAeC,CAAC,GAAC,CAAjB,MAAsB,CAAC,CAHvB,IAIAI,WAAW,CAACL,CAAD,CAAX,CAAeC,CAAC,GAAC,CAAjB,MAAsB,CAAC,CAL3B,EAK6B;AACzBK,MAAAA,KAAK,CAAC,OAAD,CAAL;AACH,KAPD,MAOM,KAAI;AACND,IAAAA,WAAW,CAACL,CAAD,CAAX,CAAeC,CAAf,MAAoB,CAAC,CAArB,IACAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAC,GAAC,CAAnB,MAAwB,CAAC,CADzB,IAEAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAC,GAAC,CAAnB,MAAwB,CAAC,CAFzB,IAGAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAC,GAAC,CAAnB,MAAwB,CAAC,CAHzB,IAIAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAC,GAAC,CAAnB,MAAwB,CAAC,CALvB,EAKyB;AAC3BK,MAAAA,KAAK,CAAC,OAAD,CAAL;AACH,KAPK,MAOA,KAAI;AACND,IAAAA,WAAW,CAACL,CAAD,CAAX,CAAeC,CAAf,MAAoB,CAAC,CAArB,IACAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAjB,MAAsB,CAAC,CADvB,IAEAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAjB,MAAsB,CAAC,CAFvB,IAGAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAjB,MAAsB,CAAC,CAHvB,IAIAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAjB,MAAsB,CAAC,CALrB,EAKuB;AACzBK,MAAAA,KAAK,CAAC,OAAD,CAAL;AACH,KAPK,MAOA,KAAI;AACND,IAAAA,WAAW,CAACL,CAAD,CAAX,CAAeC,CAAf,MAAoB,CAAC,CAArB,IACAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAC,GAAC,CAAnB,MAAwB,CAAC,CADzB,IAEAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAC,GAAC,CAAnB,MAAwB,CAAC,CAFzB,IAGAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAC,GAAC,CAAnB,MAAwB,CAAC,CAHzB,IAIAI,WAAW,CAACL,CAAC,GAAC,CAAH,CAAX,CAAiBC,CAAC,GAAC,CAAnB,MAAwB,CAAC,CALvB,EAKyB;AAC3BK,MAAAA,KAAK,CAAC,OAAD,CAAL;AACH;AACJ;AACJ,CAjED;;AAmEA,SAASC,WAAT,CAAqBP,CAArB,EAAwBC,CAAxB,EAA2BC,IAA3B,EAAiCM,QAAjC,EAA0C,CAAE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDV,OAAO,CAACW,IAAR,GAAe,MAAI;AACfC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,CAFD","sourcesContent":["exports.winRule = (i, j, turn, stoneArr, max) => { \n    //i,j 는 2차원 배열의 index, turn은 흑인지 백인지, \n    //sonteArr 는 판의 상태(2차원 배열), max 는 판의 최대 크기 \n    const winCheckArr = stoneArr;\n    if(turn === 0){//흑돌 차례일 때 승리조건 판단\n        if(// LEFT\n            winCheckArr[i][j]===1 && \n            winCheckArr[i][j+1]===1 && \n            winCheckArr[i][j+2]===1 && \n            winCheckArr[i][j+3]===1 && \n            winCheckArr[i][j+4]===1){\n            alert(\"흑 승리!\")\n        }else if( // LEFT DOWN\n            winCheckArr[i][j]===1 && \n            winCheckArr[i+1][j+1]===1 && \n            winCheckArr[i+2][j+2]===1 && \n            winCheckArr[i+3][j+3]===1 && \n            winCheckArr[i+4][j+4]===1){\n            alert(\"흑 승리!\")            \n        }else if( // DOWN\n            winCheckArr[i][j]===1 && \n            winCheckArr[i+1][j]===1 && \n            winCheckArr[i+2][j]===1 && \n            winCheckArr[i+3][j]===1 && \n            winCheckArr[i+4][j]===1){\n            alert(\"흑 승리!\")\n        }else if( // RIGHT DOWN\n            winCheckArr[i][j]===1 && \n            winCheckArr[i+1][j-1]===1 && \n            winCheckArr[i+2][j-2]===1 && \n            winCheckArr[i+3][j-3]===1 && \n            winCheckArr[i+4][j-4]===1){\n            alert(\"흑 승리!\")\n        }\n    }else if(turn === 1){//백돌 차례일 때 승리조건 판단\n        if(// LEFT\n            winCheckArr[i][j]===-1 && \n            winCheckArr[i][j+1]===-1 && \n            winCheckArr[i][j+2]===-1 && \n            winCheckArr[i][j+3]===-1 && \n            winCheckArr[i][j+4]===-1){\n            alert(\"흑 승리!\")\n        }else if( // LEFT DOWN\n            winCheckArr[i][j]===-1 && \n            winCheckArr[i+1][j+1]===-1 && \n            winCheckArr[i+2][j+2]===-1 && \n            winCheckArr[i+3][j+3]===-1 && \n            winCheckArr[i+4][j+4]===-1){\n            alert(\"흑 승리!\")            \n        }else if( // DOWN\n            winCheckArr[i][j]===-1 && \n            winCheckArr[i+1][j]===-1 && \n            winCheckArr[i+2][j]===-1 && \n            winCheckArr[i+3][j]===-1 && \n            winCheckArr[i+4][j]===-1){\n            alert(\"흑 승리!\")\n        }else if( // RIGHT DOWN\n            winCheckArr[i][j]===-1 && \n            winCheckArr[i+1][j-1]===-1 && \n            winCheckArr[i+2][j-2]===-1 && \n            winCheckArr[i+3][j-3]===-1 && \n            winCheckArr[i+4][j-4]===-1){\n            alert(\"흑 승리!\")\n        }\n    }\n}\n\nfunction checkAround(i, j, turn, checkArr){ // 돌을 놓는 곳을 기준으로 8방향에서 돌이 존재하는 확인하는 부분\n    // turn 은 흑,백돌을 판단하는 부분, checkArr 는 확인할 배열\n    // checkArr[i-1][j-1]===turn \n    // checkArr[i][j-1]===turn \n    // checkArr[i+1][j-1]===turn \n    // checkArr[i-1][j]===turn \n    // checkArr[i+1][j]===turn \n    // checkArr[i-1][j+1]===turn \n    // checkArr[i][j+1]===turn \n    // checkArr[i+1][j+1]===turn \n}\n\nexports.test = ()=>{\n    console.log(\"test\");\n}"]},"metadata":{},"sourceType":"module"}