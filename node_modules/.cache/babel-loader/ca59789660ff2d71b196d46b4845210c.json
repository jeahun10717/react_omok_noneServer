{"ast":null,"code":"exports.winRule = (turn, stoneArr, max) => {\n  //i,j 는 2차원 배열의 index, turn은 흑인지 백인지, \n  //sonteArr 는 판의 상태(2차원 배열), max 는 판의 최대 크기 \n  const winCheckArr = stoneArr; // console.log(winCheckArr);\n\n  if (turn == 0) {\n    //흑돌 차례일 때 승리조건 판단\n    for (let i = 0; i < max; i++) {\n      for (let j = 0; j < max; j++) {\n        if (winCheckArr[i][j] == 0) {\n          continue;\n        }\n\n        if ( // RIGHT\n        winCheckArr[i][j] == 1 && winCheckArr[i][j + 1] == 1 && winCheckArr[i][j + 2] == 1 && winCheckArr[i][j + 3] == 1 && winCheckArr[i][j + 4] == 1) {\n          console.log(winCheckArr);\n\n          if (winCheckArr[i][j + 5] == 1) {\n            // 6목 판단\n            console.log(\"t!!!!!!!!!\");\n            return \"prohibitRule\";\n          }\n\n          alert(\"흑 승리!\");\n          return \"blackWin\";\n        } else if ( // RIGHT DOWN\n        winCheckArr[i][j] == 1 && winCheckArr[i + 1][j + 1] == 1 && winCheckArr[i + 2][j + 2] == 1 && winCheckArr[i + 3][j + 3] == 1 && winCheckArr[i + 4][j + 4] == 1) {\n          alert(\"흑 승리!\");\n          return \"blackWin\";\n        } else if ( // DOWN\n        winCheckArr[i][j] == 1 && winCheckArr[i + 1][j] == 1 && winCheckArr[i + 2][j] == 1 && winCheckArr[i + 3][j] == 1 && winCheckArr[i + 4][j] == 1) {\n          alert(\"흑 승리!\");\n          return \"blackWin\";\n        } else if ( // LEFT DOWN\n        winCheckArr[i][j] == 1 && winCheckArr[i + 1][j - 1] == 1 && winCheckArr[i + 2][j - 2] == 1 && winCheckArr[i + 3][j - 3] == 1 && winCheckArr[i + 4][j - 4] == 1) {\n          alert(\"흑 승리!\");\n          return \"blackWin\";\n        } else {\n          // winrule 에 걸리지 않을 경우\n          return \"continue\";\n        }\n      }\n    }\n  } else if (turn == 1) {\n    //백돌 차례일 때 승리조건 판단\n    for (let i = 0; i < max; i++) {\n      for (let j = 0; j < max; j++) {\n        if ( // LEFT\n        winCheckArr[i][j] == -1 && winCheckArr[i][j + 1] == -1 && winCheckArr[i][j + 2] == -1 && winCheckArr[i][j + 3] == -1 && winCheckArr[i][j + 4] == -1) {\n          alert(\"백 승리!\");\n          return \"whiteWin\";\n        } else if ( // LEFT DOWN\n        winCheckArr[i][j] == -1 && winCheckArr[i + 1][j + 1] == -1 && winCheckArr[i + 2][j + 2] == -1 && winCheckArr[i + 3][j + 3] == -1 && winCheckArr[i + 4][j + 4] == -1) {\n          alert(\"백 승리!\");\n          return \"whiteWin\";\n        } else if ( // DOWN\n        winCheckArr[i][j] == -1 && winCheckArr[i + 1][j] == -1 && winCheckArr[i + 2][j] == -1 && winCheckArr[i + 3][j] == -1 && winCheckArr[i + 4][j] == -1) {\n          alert(\"백 승리!\");\n          return \"whiteWin\";\n        } else if ( // RIGHT DOWN\n        winCheckArr[i][j] == -1 && winCheckArr[i + 1][j - 1] == -1 && winCheckArr[i + 2][j - 2] == -1 && winCheckArr[i + 3][j - 3] == -1 && winCheckArr[i + 4][j - 4] == -1) {\n          alert(\"백 승리!\");\n          return \"whiteWin\";\n        }\n      }\n    }\n  }\n};\n\nfunction checkAround(i, j, turn, checkArr) {// 돌을 놓는 곳을 기준으로 8방향에서 돌이 존재하는 확인하는 부분\n  // turn 은 흑,백돌을 판단하는 부분, checkArr 는 확인할 배열\n  // checkArr[i-1][j-1]==turn \n  // checkArr[i][j-1]==turn \n  // checkArr[i+1][j-1]==turn \n  // checkArr[i-1][j]==turn \n  // checkArr[i+1][j]==turn \n  // checkArr[i-1][j+1]==turn \n  // checkArr[i][j+1]==turn \n  // checkArr[i+1][j+1]==turn \n}\n\nexports.test = () => {\n  console.log(\"test\");\n};","map":{"version":3,"sources":["/Users/seongjehun/Desktop/study/reactPrac/omok/src/rules/winRule.js"],"names":["exports","winRule","turn","stoneArr","max","winCheckArr","i","j","console","log","alert","checkAround","checkArr","test"],"mappings":"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","sourcesContent":["exports.winRule = (turn, stoneArr, max) => { \n    //i,j 는 2차원 배열의 index, turn은 흑인지 백인지, \n    //sonteArr 는 판의 상태(2차원 배열), max 는 판의 최대 크기 \n    const winCheckArr = stoneArr;\n    // console.log(winCheckArr);\n    if(turn == 0){//흑돌 차례일 때 승리조건 판단\n        for (let i = 0; i < max; i++) {\n            for (let j = 0; j < max; j++) {\n                if(winCheckArr[i][j] == 0) {\n                    continue;\n                }\n                if(// RIGHT\n                    winCheckArr[i][j]==1 && \n                    winCheckArr[i][j+1]==1 && \n                    winCheckArr[i][j+2]==1 && \n                    winCheckArr[i][j+3]==1 && \n                    winCheckArr[i][j+4]==1){\n                        console.log(winCheckArr);\n                        if(winCheckArr[i][j+5]==1){ // 6목 판단\n                            console.log(\"t!!!!!!!!!\");\n                            return \"prohibitRule\"\n                        }\n                    alert(\"흑 승리!\")\n                    return \"blackWin\"\n                }else if( // RIGHT DOWN\n                    winCheckArr[i][j]==1 && \n                    winCheckArr[i+1][j+1]==1 && \n                    winCheckArr[i+2][j+2]==1 && \n                    winCheckArr[i+3][j+3]==1 && \n                    winCheckArr[i+4][j+4]==1){\n                    alert(\"흑 승리!\")            \n                    return \"blackWin\"\n                }else if( // DOWN\n                    winCheckArr[i][j]==1 && \n                    winCheckArr[i+1][j]==1 && \n                    winCheckArr[i+2][j]==1 && \n                    winCheckArr[i+3][j]==1 && \n                    winCheckArr[i+4][j]==1){\n                    alert(\"흑 승리!\")\n                    return \"blackWin\"\n                }else if( // LEFT DOWN\n                    winCheckArr[i][j]==1 && \n                    winCheckArr[i+1][j-1]==1 && \n                    winCheckArr[i+2][j-2]==1 && \n                    winCheckArr[i+3][j-3]==1 && \n                    winCheckArr[i+4][j-4]==1){\n                    alert(\"흑 승리!\")\n                    return \"blackWin\"\n                }else{ // winrule 에 걸리지 않을 경우\n                    return \"continue\"\n                }          \n            }\n        }\n    }else if(turn == 1){//백돌 차례일 때 승리조건 판단\n        for (let i = 0; i < max; i++) {\n            for (let j = 0; j < max; j++) {\n                if(// LEFT\n                    winCheckArr[i][j]==-1 && \n                    winCheckArr[i][j+1]==-1 && \n                    winCheckArr[i][j+2]==-1 && \n                    winCheckArr[i][j+3]==-1 && \n                    winCheckArr[i][j+4]==-1){\n                    alert(\"백 승리!\")\n                    return \"whiteWin\"\n                }else if( // LEFT DOWN\n                    winCheckArr[i][j]==-1 && \n                    winCheckArr[i+1][j+1]==-1 && \n                    winCheckArr[i+2][j+2]==-1 && \n                    winCheckArr[i+3][j+3]==-1 && \n                    winCheckArr[i+4][j+4]==-1){\n                    alert(\"백 승리!\")\n                    return \"whiteWin\"            \n                }else if( // DOWN\n                    winCheckArr[i][j]==-1 && \n                    winCheckArr[i+1][j]==-1 && \n                    winCheckArr[i+2][j]==-1 && \n                    winCheckArr[i+3][j]==-1 && \n                    winCheckArr[i+4][j]==-1){\n                    alert(\"백 승리!\")\n                    return \"whiteWin\"\n                }else if( // RIGHT DOWN\n                    winCheckArr[i][j]==-1 && \n                    winCheckArr[i+1][j-1]==-1 && \n                    winCheckArr[i+2][j-2]==-1 && \n                    winCheckArr[i+3][j-3]==-1 && \n                    winCheckArr[i+4][j-4]==-1){\n                    alert(\"백 승리!\")\n                    return \"whiteWin\"\n                }          \n            }\n        }\n    }\n}\n\nfunction checkAround(i, j, turn, checkArr){ // 돌을 놓는 곳을 기준으로 8방향에서 돌이 존재하는 확인하는 부분\n    // turn 은 흑,백돌을 판단하는 부분, checkArr 는 확인할 배열\n    // checkArr[i-1][j-1]==turn \n    // checkArr[i][j-1]==turn \n    // checkArr[i+1][j-1]==turn \n    // checkArr[i-1][j]==turn \n    // checkArr[i+1][j]==turn \n    // checkArr[i-1][j+1]==turn \n    // checkArr[i][j+1]==turn \n    // checkArr[i+1][j+1]==turn \n}\n\nexports.test = ()=>{\n    console.log(\"test\");\n}"]},"metadata":{},"sourceType":"module"}